// Auto-generated by Convert on 2025-09-10 14:17:50

String createHTML() {
  String str = "";
  str += "<!DOCTYPE html>\n";
  str += "<html lang=\"en\">\n";
  str += "<head>\n";
  str += "    <meta charset=\"utf-8\" />\n";
  str += "    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\" />\n";
  str += "    <title>LED Controller (Standalone Demo)</title>\n";
  str += "    <style>\n";
  str += "        body{font-family:Arial,Helvetica,sans-serif;color:#444;text-align:center;margin:0;padding:40px 16px;}\n";
  str += "        .title{font-size:30px;font-weight:700;letter-spacing:1px;margin:20px 0 30px;}\n";
  str += "        .toolbar{display:flex;justify-content:center;gap:14px;align-items:center;margin-bottom:20px;color:#666;font-size:14px;}\n";
  str += "        .led-control{display:flex;align-items:center;justify-content:center;margin:24px 0;gap:18px;}\n";
  str += "        .led-label{font-size:22px;min-width:90px;text-align:right;}\n";
  str += "        .btn-wrap{min-width:180px;text-align:left;}\n";
  str += "        .btn-toggle{font-size:22px;padding:14px 28px;border:none;border-radius:12px;cursor:pointer;\n";
  str += "                    box-shadow:0 2px 6px rgba(0,0,0,.15);transition:transform .05s ease,opacity .1s ease;}\n";
  str += "        .btn-toggle:active{transform:scale(0.98);}\n";
  str += "        .btn-toggle.on{background:#2e7d32;color:#fff;}   /* green */\n";
  str += "        .btn-toggle.off{background:#c62828;color:#fff;}  /* red   */\n";
  str += "        .hint{font-size:12px;color:#777;margin-top:4px;}\n";
  str += "        .status{margin-top:24px;color:#666;font-size:13px;}\n";
  str += "        .hr{height:1px;background:#eee;margin:24px auto;max-width:640px;}\n";
  str += "    </style>\n";
  str += "</head>\n";
  str += "\n";
  str += "<body>\n";
  str += "  <h1 class=\"title\">LED CONTROLLER (Standalone)</h1>\n";
  str += "\n";
  str += "  <div class=\"toolbar\">\n";
  str += "    <label>\n";
  str += "      <input id=\"simulate\" type=\"checkbox\">\n";
  str += "      Simulate other client changes\n";
  str += "    </label>\n";
  str += "    <span>•</span>\n";
  str += "    <span>Preview only — no ESP32 required</span>\n";
  str += "  </div>\n";
  str += "\n";
  str += "  <!-- LED 1 -->\n";
  str += "  <div class=\"led-control\">\n";
  str += "    <div class=\"led-label\">LED 1</div>\n";
  str += "    <div class=\"btn-wrap\">\n";
  str += "      <button id=\"led1\" class=\"btn-toggle off\" aria-pressed=\"false\">OFF</button>\n";
  str += "      <div class=\"hint\">click to toggle</div>\n";
  str += "    </div>\n";
  str += "  </div>\n";
  str += "\n";
  str += "  <!-- LED 2 -->\n";
  str += "  <div class=\"led-control\">\n";
  str += "    <div class=\"led-label\">LED 2</div>\n";
  str += "    <div class=\"btn-wrap\">\n";
  str += "      <button id=\"led2\" class=\"btn-toggle off\" aria-pressed=\"false\">OFF</button>\n";
  str += "      <div class=\"hint\">click to toggle</div>\n";
  str += "    </div>\n";
  str += "  </div>\n";
  str += "\n";
  str += "  <div class=\"hr\"></div>\n";
  str += "  <div class=\"status\" id=\"status\">State: { led1: 0, led2: 0 }</div>\n";
  str += "\n";
  str += "<script>\n";
  str += "  // ----------------------------\n";
  str += "  // Standalone mock state + UI\n";
  str += "  // ----------------------------\n";
  str += "  const state = { led1: 0, led2: 0 };\n";
  str += "  const statusEl = document.getElementById('status');\n";
  str += "  const btn1 = document.getElementById('led1');\n";
  str += "  const btn2 = document.getElementById('led2');\n";
  str += "  const simulateChk = document.getElementById('simulate');\n";
  str += "\n";
  str += "  function render() {\n";
  str += "    setBtn(btn1, !!state.led1);\n";
  str += "    setBtn(btn2, !!state.led2);\n";
  str += "    statusEl.textContent = `State: { led1: ${state.led1}, led2: ${state.led2} }`;\n";
  str += "  }\n";
  str += "\n";
  str += "  function setBtn(btn, on) {\n";
  str += "    btn.classList.toggle('on', on);\n";
  str += "    btn.classList.toggle('off', !on);\n";
  str += "    btn.textContent = on ? 'ON' : 'OFF';\n";
  str += "    btn.setAttribute('aria-pressed', on ? 'true' : 'false');\n";
  str += "  }\n";
  str += "\n";
  str += "  // Local toggle (no network)\n";
  str += "  btn1.addEventListener('click', () => {\n";
  str += "    state.led1 = state.led1 ? 0 : 1;\n";
  str += "    render();\n";
  str += "  });\n";
  str += "  btn2.addEventListener('click', () => {\n";
  str += "    state.led2 = state.led2 ? 0 : 1;\n";
  str += "    render();\n";
  str += "  });\n";
  str += "\n";
  str += "  // Optional: simulate another client changing the state in the background\n";
  str += "  let simTimer = null;\n";
  str += "  simulateChk.addEventListener('change', () => {\n";
  str += "    if (simulateChk.checked) {\n";
  str += "      simTimer = setInterval(() => {\n";
  str += "        // randomly flip one LED to mimic remote change\n";
  str += "        const which = Math.random() < 0.5 ? 'led1' : 'led2';\n";
  str += "        state[which] = state[which] ? 0 : 1;\n";
  str += "        render();\n";
  str += "      }, 2000);\n";
  str += "    } else {\n";
  str += "      clearInterval(simTimer);\n";
  str += "      simTimer = null;\n";
  str += "    }\n";
  str += "  });\n";
  str += "\n";
  str += "  // Initial render\n";
  str += "  render();\n";
  str += "\n";
  str += "  // ----------------------------\n";
  str += "  // When you're ready to connect to the real ESP32:\n";
  str += "  // - Remove the simulate/timer code\n";
  str += "  // - Replace local toggles with fetch('http://<ESP-IP>/led1on'), etc.\n";
  str += "  // - Add a poll() using fetch('http://<ESP-IP>/state') and call render()\n";
  str += "  // ----------------------------\n";
  str += "</script>\n";
  str += "</body>\n";
  str += "</html>\n";
  return str;
}
